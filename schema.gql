"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Bitcoin {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  image: UploadFile
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
}

type BitcoinConnection {
  values: [Bitcoin]
  groupBy: BitcoinGroupBy
  aggregate: BitcoinAggregator
}

type BitcoinAggregator {
  count: Int
  totalCount: Int
}

type BitcoinGroupBy {
  id: [BitcoinConnectionId]
  created_at: [BitcoinConnectionCreated_at]
  updated_at: [BitcoinConnectionUpdated_at]
  title: [BitcoinConnectionTitle]
  image: [BitcoinConnectionImage]
  short_description: [BitcoinConnectionShort_description]
  large_description: [BitcoinConnectionLarge_description]
  publisher: [BitcoinConnectionPublisher]
  publishedAt: [BitcoinConnectionPublishedAt]
  viewed: [BitcoinConnectionViewed]
  published_at: [BitcoinConnectionPublished_at]
}

type BitcoinConnectionId {
  key: ID
  connection: BitcoinConnection
}

type BitcoinConnectionCreated_at {
  key: DateTime
  connection: BitcoinConnection
}

type BitcoinConnectionUpdated_at {
  key: DateTime
  connection: BitcoinConnection
}

type BitcoinConnectionTitle {
  key: String
  connection: BitcoinConnection
}

type BitcoinConnectionImage {
  key: ID
  connection: BitcoinConnection
}

type BitcoinConnectionShort_description {
  key: String
  connection: BitcoinConnection
}

type BitcoinConnectionLarge_description {
  key: String
  connection: BitcoinConnection
}

type BitcoinConnectionPublisher {
  key: String
  connection: BitcoinConnection
}

type BitcoinConnectionPublishedAt {
  key: String
  connection: BitcoinConnection
}

type BitcoinConnectionViewed {
  key: ID
  connection: BitcoinConnection
}

type BitcoinConnectionPublished_at {
  key: DateTime
  connection: BitcoinConnection
}

input BitcoinInput {
  title: String!
  image: ID
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBitcoinInput {
  title: String
  image: ID
  short_description: String
  large_description: String
  publisher: String
  publishedAt: String
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBitcoinInput {
  data: BitcoinInput
}

type createBitcoinPayload {
  bitcoin: Bitcoin
}

input updateBitcoinInput {
  where: InputID
  data: editBitcoinInput
}

type updateBitcoinPayload {
  bitcoin: Bitcoin
}

input deleteBitcoinInput {
  where: InputID
}

type deleteBitcoinPayload {
  bitcoin: Bitcoin
}

type Cardano {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  image: UploadFile
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
}

type CardanoConnection {
  values: [Cardano]
  groupBy: CardanoGroupBy
  aggregate: CardanoAggregator
}

type CardanoAggregator {
  count: Int
  totalCount: Int
}

type CardanoGroupBy {
  id: [CardanoConnectionId]
  created_at: [CardanoConnectionCreated_at]
  updated_at: [CardanoConnectionUpdated_at]
  title: [CardanoConnectionTitle]
  image: [CardanoConnectionImage]
  short_description: [CardanoConnectionShort_description]
  large_description: [CardanoConnectionLarge_description]
  publisher: [CardanoConnectionPublisher]
  publishedAt: [CardanoConnectionPublishedAt]
  viewed: [CardanoConnectionViewed]
  published_at: [CardanoConnectionPublished_at]
}

type CardanoConnectionId {
  key: ID
  connection: CardanoConnection
}

type CardanoConnectionCreated_at {
  key: DateTime
  connection: CardanoConnection
}

type CardanoConnectionUpdated_at {
  key: DateTime
  connection: CardanoConnection
}

type CardanoConnectionTitle {
  key: String
  connection: CardanoConnection
}

type CardanoConnectionImage {
  key: ID
  connection: CardanoConnection
}

type CardanoConnectionShort_description {
  key: String
  connection: CardanoConnection
}

type CardanoConnectionLarge_description {
  key: String
  connection: CardanoConnection
}

type CardanoConnectionPublisher {
  key: String
  connection: CardanoConnection
}

type CardanoConnectionPublishedAt {
  key: String
  connection: CardanoConnection
}

type CardanoConnectionViewed {
  key: ID
  connection: CardanoConnection
}

type CardanoConnectionPublished_at {
  key: DateTime
  connection: CardanoConnection
}

input CardanoInput {
  title: String!
  image: ID
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCardanoInput {
  title: String
  image: ID
  short_description: String
  large_description: String
  publisher: String
  publishedAt: String
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCardanoInput {
  data: CardanoInput
}

type createCardanoPayload {
  cardano: Cardano
}

input updateCardanoInput {
  where: InputID
  data: editCardanoInput
}

type updateCardanoPayload {
  cardano: Cardano
}

input deleteCardanoInput {
  where: InputID
}

type deleteCardanoPayload {
  cardano: Cardano
}

type Cotation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  current_cotation: String!
  published_at: DateTime
}

type CotationConnection {
  values: [Cotation]
  groupBy: CotationGroupBy
  aggregate: CotationAggregator
}

type CotationAggregator {
  count: Int
  totalCount: Int
}

type CotationGroupBy {
  id: [CotationConnectionId]
  created_at: [CotationConnectionCreated_at]
  updated_at: [CotationConnectionUpdated_at]
  name: [CotationConnectionName]
  current_cotation: [CotationConnectionCurrent_cotation]
  published_at: [CotationConnectionPublished_at]
}

type CotationConnectionId {
  key: ID
  connection: CotationConnection
}

type CotationConnectionCreated_at {
  key: DateTime
  connection: CotationConnection
}

type CotationConnectionUpdated_at {
  key: DateTime
  connection: CotationConnection
}

type CotationConnectionName {
  key: String
  connection: CotationConnection
}

type CotationConnectionCurrent_cotation {
  key: String
  connection: CotationConnection
}

type CotationConnectionPublished_at {
  key: DateTime
  connection: CotationConnection
}

input CotationInput {
  name: String!
  current_cotation: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCotationInput {
  name: String
  current_cotation: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCotationInput {
  data: CotationInput
}

type createCotationPayload {
  cotation: Cotation
}

input updateCotationInput {
  where: InputID
  data: editCotationInput
}

type updateCotationPayload {
  cotation: Cotation
}

input deleteCotationInput {
  where: InputID
}

type deleteCotationPayload {
  cotation: Cotation
}

type Ethereum {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  image: UploadFile
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
}

type EthereumConnection {
  values: [Ethereum]
  groupBy: EthereumGroupBy
  aggregate: EthereumAggregator
}

type EthereumAggregator {
  count: Int
  totalCount: Int
}

type EthereumGroupBy {
  id: [EthereumConnectionId]
  created_at: [EthereumConnectionCreated_at]
  updated_at: [EthereumConnectionUpdated_at]
  title: [EthereumConnectionTitle]
  image: [EthereumConnectionImage]
  short_description: [EthereumConnectionShort_description]
  large_description: [EthereumConnectionLarge_description]
  publisher: [EthereumConnectionPublisher]
  publishedAt: [EthereumConnectionPublishedAt]
  viewed: [EthereumConnectionViewed]
  published_at: [EthereumConnectionPublished_at]
}

type EthereumConnectionId {
  key: ID
  connection: EthereumConnection
}

type EthereumConnectionCreated_at {
  key: DateTime
  connection: EthereumConnection
}

type EthereumConnectionUpdated_at {
  key: DateTime
  connection: EthereumConnection
}

type EthereumConnectionTitle {
  key: String
  connection: EthereumConnection
}

type EthereumConnectionImage {
  key: ID
  connection: EthereumConnection
}

type EthereumConnectionShort_description {
  key: String
  connection: EthereumConnection
}

type EthereumConnectionLarge_description {
  key: String
  connection: EthereumConnection
}

type EthereumConnectionPublisher {
  key: String
  connection: EthereumConnection
}

type EthereumConnectionPublishedAt {
  key: String
  connection: EthereumConnection
}

type EthereumConnectionViewed {
  key: ID
  connection: EthereumConnection
}

type EthereumConnectionPublished_at {
  key: DateTime
  connection: EthereumConnection
}

input EthereumInput {
  title: String!
  image: ID
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editEthereumInput {
  title: String
  image: ID
  short_description: String
  large_description: String
  publisher: String
  publishedAt: String
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createEthereumInput {
  data: EthereumInput
}

type createEthereumPayload {
  ethereum: Ethereum
}

input updateEthereumInput {
  where: InputID
  data: editEthereumInput
}

type updateEthereumPayload {
  ethereum: Ethereum
}

input deleteEthereumInput {
  where: InputID
}

type deleteEthereumPayload {
  ethereum: Ethereum
}

type New {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  published_at: DateTime
}

type NewConnection {
  values: [New]
  groupBy: NewGroupBy
  aggregate: NewAggregator
}

type NewAggregator {
  count: Int
  totalCount: Int
}

type NewGroupBy {
  id: [NewConnectionId]
  created_at: [NewConnectionCreated_at]
  updated_at: [NewConnectionUpdated_at]
  title: [NewConnectionTitle]
  published_at: [NewConnectionPublished_at]
}

type NewConnectionId {
  key: ID
  connection: NewConnection
}

type NewConnectionCreated_at {
  key: DateTime
  connection: NewConnection
}

type NewConnectionUpdated_at {
  key: DateTime
  connection: NewConnection
}

type NewConnectionTitle {
  key: String
  connection: NewConnection
}

type NewConnectionPublished_at {
  key: DateTime
  connection: NewConnection
}

input NewInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNewInput {
  data: NewInput
}

type createNewPayload {
  new: New
}

input updateNewInput {
  where: InputID
  data: editNewInput
}

type updateNewPayload {
  new: New
}

input deleteNewInput {
  where: InputID
}

type deleteNewPayload {
  new: New
}

type Others {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  image: UploadFile
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
}

type OthersConnection {
  values: [Others]
  groupBy: OthersGroupBy
  aggregate: OthersAggregator
}

type OthersAggregator {
  count: Int
  totalCount: Int
}

type OthersGroupBy {
  id: [OthersConnectionId]
  created_at: [OthersConnectionCreated_at]
  updated_at: [OthersConnectionUpdated_at]
  title: [OthersConnectionTitle]
  image: [OthersConnectionImage]
  short_description: [OthersConnectionShort_description]
  large_description: [OthersConnectionLarge_description]
  publisher: [OthersConnectionPublisher]
  publishedAt: [OthersConnectionPublishedAt]
  viewed: [OthersConnectionViewed]
  published_at: [OthersConnectionPublished_at]
}

type OthersConnectionId {
  key: ID
  connection: OthersConnection
}

type OthersConnectionCreated_at {
  key: DateTime
  connection: OthersConnection
}

type OthersConnectionUpdated_at {
  key: DateTime
  connection: OthersConnection
}

type OthersConnectionTitle {
  key: String
  connection: OthersConnection
}

type OthersConnectionImage {
  key: ID
  connection: OthersConnection
}

type OthersConnectionShort_description {
  key: String
  connection: OthersConnection
}

type OthersConnectionLarge_description {
  key: String
  connection: OthersConnection
}

type OthersConnectionPublisher {
  key: String
  connection: OthersConnection
}

type OthersConnectionPublishedAt {
  key: String
  connection: OthersConnection
}

type OthersConnectionViewed {
  key: ID
  connection: OthersConnection
}

type OthersConnectionPublished_at {
  key: DateTime
  connection: OthersConnection
}

input OtherInput {
  title: String!
  image: ID
  short_description: String!
  large_description: String!
  publisher: String!
  publishedAt: String!
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOtherInput {
  title: String
  image: ID
  short_description: String
  large_description: String
  publisher: String
  publishedAt: String
  viewed: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOtherInput {
  data: OtherInput
}

type createOtherPayload {
  other: Others
}

input updateOtherInput {
  where: InputID
  data: editOtherInput
}

type updateOtherPayload {
  other: Others
}

input deleteOtherInput {
  where: InputID
}

type deleteOtherPayload {
  other: Others
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Bitcoin | BitcoinConnection | BitcoinAggregator | BitcoinGroupBy | BitcoinConnectionId | BitcoinConnectionCreated_at | BitcoinConnectionUpdated_at | BitcoinConnectionTitle | BitcoinConnectionImage | BitcoinConnectionShort_description | BitcoinConnectionLarge_description | BitcoinConnectionPublisher | BitcoinConnectionPublishedAt | BitcoinConnectionViewed | BitcoinConnectionPublished_at | createBitcoinPayload | updateBitcoinPayload | deleteBitcoinPayload | Cardano | CardanoConnection | CardanoAggregator | CardanoGroupBy | CardanoConnectionId | CardanoConnectionCreated_at | CardanoConnectionUpdated_at | CardanoConnectionTitle | CardanoConnectionImage | CardanoConnectionShort_description | CardanoConnectionLarge_description | CardanoConnectionPublisher | CardanoConnectionPublishedAt | CardanoConnectionViewed | CardanoConnectionPublished_at | createCardanoPayload | updateCardanoPayload | deleteCardanoPayload | Cotation | CotationConnection | CotationAggregator | CotationGroupBy | CotationConnectionId | CotationConnectionCreated_at | CotationConnectionUpdated_at | CotationConnectionName | CotationConnectionCurrent_cotation | CotationConnectionPublished_at | createCotationPayload | updateCotationPayload | deleteCotationPayload | Ethereum | EthereumConnection | EthereumAggregator | EthereumGroupBy | EthereumConnectionId | EthereumConnectionCreated_at | EthereumConnectionUpdated_at | EthereumConnectionTitle | EthereumConnectionImage | EthereumConnectionShort_description | EthereumConnectionLarge_description | EthereumConnectionPublisher | EthereumConnectionPublishedAt | EthereumConnectionViewed | EthereumConnectionPublished_at | createEthereumPayload | updateEthereumPayload | deleteEthereumPayload | New | NewConnection | NewAggregator | NewGroupBy | NewConnectionId | NewConnectionCreated_at | NewConnectionUpdated_at | NewConnectionTitle | NewConnectionPublished_at | createNewPayload | updateNewPayload | deleteNewPayload | Others | OthersConnection | OthersAggregator | OthersGroupBy | OthersConnectionId | OthersConnectionCreated_at | OthersConnectionUpdated_at | OthersConnectionTitle | OthersConnectionImage | OthersConnectionShort_description | OthersConnectionLarge_description | OthersConnectionPublisher | OthersConnectionPublishedAt | OthersConnectionViewed | OthersConnectionPublished_at | createOtherPayload | updateOtherPayload | deleteOtherPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  bitcoin(id: ID!, publicationState: PublicationState): Bitcoin
  bitcoins(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Bitcoin!]!
  bitcoinsConnection(sort: String, limit: Int, start: Int, where: JSON): BitcoinConnection
  cardano(id: ID!, publicationState: PublicationState): Cardano
  cardanos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Cardano!]!
  cardanosConnection(sort: String, limit: Int, start: Int, where: JSON): CardanoConnection
  cotation(id: ID!, publicationState: PublicationState): Cotation
  cotations(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Cotation!]!
  cotationsConnection(sort: String, limit: Int, start: Int, where: JSON): CotationConnection
  ethereum(id: ID!, publicationState: PublicationState): Ethereum
  ethereums(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Ethereum!]!
  ethereumsConnection(sort: String, limit: Int, start: Int, where: JSON): EthereumConnection
  new(id: ID!, publicationState: PublicationState): New
  news(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [New!]!
  newsConnection(sort: String, limit: Int, start: Int, where: JSON): NewConnection
  other(id: ID!, publicationState: PublicationState): Others
  others(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Others!]!
  othersConnection(sort: String, limit: Int, start: Int, where: JSON): OthersConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createBitcoin(input: createBitcoinInput): createBitcoinPayload
  updateBitcoin(input: updateBitcoinInput): updateBitcoinPayload
  deleteBitcoin(input: deleteBitcoinInput): deleteBitcoinPayload
  createCardano(input: createCardanoInput): createCardanoPayload
  updateCardano(input: updateCardanoInput): updateCardanoPayload
  deleteCardano(input: deleteCardanoInput): deleteCardanoPayload
  createCotation(input: createCotationInput): createCotationPayload
  updateCotation(input: updateCotationInput): updateCotationPayload
  deleteCotation(input: deleteCotationInput): deleteCotationPayload
  createEthereum(input: createEthereumInput): createEthereumPayload
  updateEthereum(input: updateEthereumInput): updateEthereumPayload
  deleteEthereum(input: deleteEthereumInput): deleteEthereumPayload
  createNew(input: createNewInput): createNewPayload
  updateNew(input: updateNewInput): updateNewPayload
  deleteNew(input: deleteNewInput): deleteNewPayload
  createOther(input: createOtherInput): createOtherPayload
  updateOther(input: updateOtherInput): updateOtherPayload
  deleteOther(input: deleteOtherInput): deleteOtherPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
